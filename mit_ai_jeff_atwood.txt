"The following is a conversation with Jeff Atwood. He is the co-founder of stack overflow and stock exchange websites that are visited by millions of people every single day. Much like with Wikipedia, it is difficult to understate the impact on global knowledge and productivity that these networks of sites have created. Jeff is also the author of the fame blog, Coding Horror and the founder of discourse, an open source software project that seeks to improve the quality of our online community discussions. This conversation is part of the mit course on Artificial General Intelligence and the Artificial Intelligence podcast. If you enjoy it, subscribe on youtube itunes or your podcast provider of choice or simply connect with me on Twitter at Lex Friedman spelled FR ID. And now here's my conversation with Jeff Atwood having co created and managed for a few years, the world's largest community of programmers in stock overflow 10 years ago. What do you think motivates most programmers? Is it fame, fortune glory process of programming itself or is it the sense of belonging to a community? I think it's uh puzzles really? I think it's this idea of working on puzzles independently of other people and just solving a problem, sort of like, on your own almost. Although, you know, nobody really works alone in programming anymore. But I will say there's a, there's an aspect of sort of hiding yourself away and just sort of beating on a problem until you solve it. Like brute force. Basically, to me is what a lot of programming is, is like, the computer is so fast, right? You can do things that would take forever for a human, but you just do them like so many times and so often that you get the answer, right? You're saying just the pure act of tinkering with the code is the thing that drives most problem, the joy, the struggle balance within the joy of overcoming the the brute force process of pain and suffering that eventually leads to something that actually works well. That is fun too. Like there's this thing called the uh the shuffling problem. Like the naive shuffle that most programmers write has a huge flaw and there's a lot of articles online about this because it can be really bad if you're like a casino and you have an unsophisticated programmer writing your shuffle algorithm. There's surprising ways to get this wrong. But the neat thing is the way to figure that out is just to run your shuffle a bunch of times and see like how many orientations of cards you get. You should get an equal distribution of all the cards. And with the naive method of shuffling, if you just look at the data, if you just brute force and say, OK, I don't know what's gonna happen. Um, you just write, write a program that does it a billion times and then see what the buckets look like of the data. And the money hall problem is another example of that where you have three doors and somebody gives you information about another door. So the correct answer is you should always switch in the money hall problem, which is not intuitive and it freaks people out all the time, right? But you can solve it with data. If you write a program that does the money hall, you know game and then never switches and always switches, just compare. You would immediately see that you don't have to be smart, right? You don't have to figure out the answer algorithmically. You can just brute force it out with data and say, well, I know the answer is this because I ran the program a billion times and these are the data buckets that I got from it, right? So empirically find it. But what's the joy of that? What, what so for you, for you personally uh outside of family, what motivates you in this process? Well, to be honest, like I don't really write a lot of code anymore. Like what I do at discourse is like manage stuff which I always kind of despised, right? Like, as a programmer, you think of managers as people who don't really do anything themselves. But the weird thing about code is like, you realize that like, language is code, like the ability to direct other people lets you get more stuff than done than you could by yourself anyway, languages, code language is meaning communication with other humans. You can think of it as a systematic. So what, what is it like to be? What makes before we get into programming? What makes a good manager? What makes a good leader? Well, I think a leader, it's, it's all about leading by example, first of all, like sort of doing and being the things that you want to be. Now, this can be kind of exhausting, particularly when you have kids because you realize that your kids are watching you like all the time, like even in ways that you've stopped seeing yourself, like the hardest person to see on the planet is really yourself, right? It's funny you see other people and, and, and make judgments about them but yourself, like you're super biased, you don't actually see yourself the way other people see you often, you're very, very hard on yourself in the way that other people really aren't going to be. So, you know, that's one of the insights is, you know, you gotta be really diligent about thinking like, am I behaving in a way that represents how I want other people to behave right? Like leading through example, there's a lot of examples of leaders that really messed this up, right? Like they make decisions that are like, wow, that's why would, you know, it's just, it's, it's, it's a bad example for other people. So I think leading by example is one the other one I believe is working really hard and I don't mean like working exhaustively but like showing a real passion for the problem, like, you know, not necessarily your solution to the problem, but the problem itself is just one that you really believe in, like with discourse, for example, the problem that we're looking at, which is my current project is how do you get people in groups to communicate in a way that doesn't like break down into the howling of wolves? Right? Like, how do you deal with trolling? Not like technical problems? How do I get people to post paragraphs? How do I get people to use bold? How do I get people to use complete sentences? Although those are problems as well? But like, how do I get people to get along with each other? Right. Like, and then solve whatever problem it is they set up to solve or you know, reach some consensus on discussion or just like, not hurt each other even? Right? Like maybe it's a discussion that doesn't really matter. But are people like yelling at each other? Right. And why? Right. Like that's not the purpose of this kind of communication. So I would say, you know, leadership is about, you know, setting an example, you know, doing the things that represent what you want to be and making sure that you're actually doing those things. And there's a trick to that too because the things you don't do also say a lot about what you are. Yeah. So le let's pause on that one. So those two things are fascinating. So how you have as a leader? Is that self awareness? So you just said it's really hard to be self-aware. So for you personally, or maybe for other leaders you've seen or look up to, how do you know the both of the things you're doing are the wrong things to be doing the way you speak to others, the way you behave and the things you're not doing. How do you, how do you get that signal? There's two aspects that one is like processing feedback that you're getting. So how do you get feedback? Right. So are you, are you getting feedback? Right. So one way we do it, for example, discourse, we have three co-founders and we periodically talk about decisions before we make them. So it's not like one person can make a mistake or like, wow, that's, you know, there can be misunderstanding things like that. So it's part of like group consensus of leadership is like, it's good to have I think systems where there's one leader and that leader has the rule of absolute law are just really dangerous in my experience for communities, for example, like if you have a community that's run by one person, that one person makes all the decisions, that person's gonna have a bad day, something could happen to that person. You know, something, you know, there's a lot of variables. So like at first when you think about leadership have, have multiple people doing leadership and have them talk amongst each other. So giving each other feedback about the decisions that they're making. And then when you do get feedback, I think there's that little voice in your head, right? Like, or your gut or wherever you want to put it in your body. Uh I think that voice is really important. Like, I think most people who have any kind of moral compass or like want to do, most people want to do the right thing. I do believe that, I mean, there might be a handful of sociopaths out there that don't, but most people, they want other people to think of them as a good person. And why wouldn't you? Right. Like, do you want people to despise you? I mean, that's just weird. Right? So you have that little voice, that sort of the angel and devil on your shoulder, sort of talking to you about like what you're doing, how you're doing, how does it make you feel to make these decisions? Right. And I think having some attunement to that voice is important. But you said that voice also for, I think this is a programmer situation too where sometimes the devil on the shoulder is a little uh a little too loud. So you're a little too self critical uh for a lot of developers and especially when you have introverted personality, how do you struggle with the self criticism of the criticism, others? So uh one of the things of leadership is to do something that's potentially unpopular or, or people doubt you and you still go through with the decision. So what's that balance? Like, I think you have to walk people through your decision making, right? Like you have to, this is where blogging is really important and communication is so important. Again, code language is just another kind of code. It's like here is the program by which I arrived at the conclusion that I'm going to reach, right? Uh It's one thing to say like this is the decision's final deal with it, right? That's not usually satisfying to people. But if you say, look, you know, we've been thinking about this problem for a while. Here's some stuff that's happened. Here's what we think is, right. Here's our goals, here's what we want to achieve. And we've looked at these options and we think this of the available options is the best option. People be like, oh OK. Right. Maybe I don't totally agree with you, but I can kind of see where you're coming from and like I see it's not just arbitrary decision delivered from AAA cloud of flames in the sky. Right. It's like a human trying to reach some kind of consensus about, you know, goals and their goals might be different than yours. That's completely legit. Right. But if you're making that clear, it's like, oh, well, the reason we don't agree is because we have totally different goals, right? Like how could we agree? It's not that you're a bad person, it's that we have radically different goals in mind when we started looking at this problem. And the other one you said is passion. So or uh hard work, sorry. Uh Well, those are tied together to me in my mind. I say hard work and passion. Like for me, like I just really love the problem discourse is setting out to solve because in a way it's like there's a, there's a vision of the world where it all devolves into Facebook, basically owning everything and every aspect of human communication, right? And this has always been kind of a scary world for me. Um First cause I don't, I think Facebook is really good at execution. I gotta compliment them. They're very competent in terms of what they're doing, but Facebook has not much of a moral compass in terms of Facebook cares about Facebook, really. They don't really care about you and your problems, what they care about is how big they can make Facebook, right? Is that you're talking about the company or just the mechanism of how Facebook works, kind of both really? Right. Like, and the idea with discourse, the reason I'm so passionate about it is because I believe every community should have the right to own themselves, right? Like they should have their own software that they can run that belongs to them. That's their space where they can set the rules. And if they don't like it, they can move to different hosting or you know, whatever they need, they need to happen, can happen. But like this, this idea of a company town where all human communication is implicitly owned by whatsapp, Instagram and Facebook. And it's really disturbing too because Facebook is really smart. Like I said, they're great at execution. Buying in whatsapp and buying Instagram were incredibly smart decisions. Um And they also do this thing. I don't if you know, but they, they have this VPN software that they give away for free on smartphones and it indirectly feeds all the the data about the traffic pack to Facebook. So they can see what's actually getting popular through the VPN S, right? They have low level access to the network data because users have let them have that. So let's let's just take a small pause here. First of all discourse, can you talk about, can you lay out the land of all the different ways you can have communities. So there's stack overflow that you've built, there's discourse. So stack overflow is kind of like a Wiki Wikipedia you talk about and it's a very specific scalpel, very focused. So what is the purpose of discourse? And maybe contrast that with Facebook. First of all, I say, what is discourse start from the beginning? Well, let me start from the very being. So stack overflow is a very structured Wiki cell Q and A for programmers, right? And uh that was the problem we first worked on. And when we started, we thought it was discussions because we looked at like programming forums and other things. But we quickly realized we were doing Q and A which is a very narrow subset of, of human communication, right? So when you started stack overflow, you thought you didn't even know the Q and A, you know, it would be, well, we didn't know we had an idea of like, OK, these are things that we see working online. We had a goal, right? Our goal was uh there was this site experts exchange with a very unfortunate name. Thank you for killing that site. Yeah, I know, right? Like a lot of people don't remember it anymore, which is great. Like that's the measure of success. When people don't remember the thing that you were trying to replace, then you've totally won. Uh So it was a place to get answers to programming questions, but it wasn't clear if it was like focused Q and A, if it was a discussion, there were plenty of programming forums. So we weren't really sure we were like, OK, we'll take aspects of Dig and Reddit. Like voting were very important uh reordering answers based on votes wiki style stuff of like being able to edit posts, not just your posts, but other people's posts to make them better and keep them more up to date. Uh ownership of blogging of like, OK, this is me, I'm saying this is my voice. You know, this is the stuff that I know and you know, you give your reputation accrues to you. Uh And it's pure recognition. So you asked earlier, like what motivates programmers? I think peer recognition motivates them a lot. Uh That was one of the key insights of stack overflow was like recognition from your peers is why things get done initially, money, not your boss, but like your peers saying, wow, this person really knows their stuff has a lot of value. So the reputation system came from that. Um So we were sort of Frankenstein in a bunch of stuff together in stack overflow of like stuff we had seen working and we knew worked. Uh and that became stack overflow. And it, over time, we realized it wasn't really discussion, it was very focused questions and answers. There wasn't a lot of room on the page for, let me talk about this tangential thing. It was more like, OK, is it answering the question? Is it clarifying the question or could it be an alternative answer to the same question? Because there's usually more than one way to do it in program? There's like, say 5 to 10 ways. And one of the patterns we got into early on the stack overflow was there are questions where there would be like hundreds of answers. And we're like, wow, how can there be a programming question with 502 105 100 answers? And we looked at those and we realized those were not really questions in the traditional sense, they were discussions. It was stuff that we allowed early on that we eventually decided wasn't allowed such as what's your favorite programming food? You know, what's the funniest programming cartoon you've seen? Uh And we had to sort of backfill a bunch of rules about like, why isn't this allowed? Such as is this a real problem you're facing? Like, nobody goes to work and says, wow, I can't work because I don't know what the funniest programming cartoon is. So sorry, can't compile this code now, right? It's not a real problem you're facing in your job. So that was run rule. And the second like, what can you really learn from that? It's like what I call accidental learning or reddit style learning where you're just like, oh, I just browse some things and oh, wow. You know, did you know, tree frogs only live three years. I mean, I, I just made that up. I don't know if that's true but, uh, I didn't really set out to learn that. I don't need to know that. Right. It's accidental learning. It was more intentional learning where you're like, OK, I have a problem and I want to learn about stuff around this problem having. Right. And it could be theory, it could be compiler theory, it could be other stuff, but I'm having a compiler problem. Hence, I need to know the compiler theory, that aspect of it that gives me the the gets me to my answer, right? So kind of a directed learning. So we had to backfill of these rules as we sort of figured out what the heck it was we were doing and the system came very strict over time and a lot of people still complain about that. And I wrote uh my latest blog entry. What does stack overflow want to be, want to be when it grows up celebrating the 10 year anniversary? Yeah. So 10 years and the system is trended towards strictness. There's a variety of reasons for this one is people don't like to see other people get reputation for stuff as they view. They view as frivolous, which I can actually understand because if you saw a programmer got like 500 up votes for funniest programming cartoon or funniest comment they had seen in it's like Well, why do they have that reputation? Is it because they wrote the joke? Probably not. I mean, they did maybe, or the cartoon, right. They're getting a bunch of reputation based on someone else's work that's not even like programming. It's just a joke. Right. It's a related program. So you, you begin to resent that. You're like, well, that's not fair and it isn't at some level. They're correct. I mean, I empathize because like it's not correct to get reputation for that. Versus here's a really narrowly regular expression problem. And here's a really, you know, clever insightful, you know, detailed answer laying out. Oh, here's why you're seeing the behavior that you're saying here, let me teach you some things about how to avoid that in the future. That's, that's great. Like that's gold, right? You want people to get reputation for that? Not so much for. Wow, look at this funny thing I saw, right? Great. So there's this very specific Q and A format and then take me through the journey towards discourse in Facebook and Twitter. So you start at the beginning that stack overflow evolve to have a purpose. So where does this course this uh passion you have for uh creating community for discussion. What, what is that? When was that born? And how well part of it is based on the realization the stack overflow is only good for very specific subjects where there's sort of, it's, it's based on data, facts and science where answers can be kind of verified to be true. Another form of that is there's the book of knowledge, like the tome of, of knowledge that defines like whatever it is, you can refer to that book and I'll give you the answer. There has to be, it only works on subjects where there's like semi clear answers to things that can be verified in some form. Um Now again, there's always more than one way to do it. Uh There's complete flexibility in the system around that, but where it falls down is is stuff like poker and lego like we had, if you go to stack exchange dot com, we have an engine that, that tries to launch different Q and A topics, right? And people can propose uh Q and A topics um sample questions and, and if it gets enough support within the network, we launch that Q and A site. So some of the ones we launched were Poker and lego and they did it horribly, right? Because um I mean, they might still be there lingering on in some form, but it was an experiment. This is like a test, right? And some subjects work super well in the stack engine and some don't. But the reason lego and Poker don't work is because they're so social really. It's not about, you know, what's the rule here in poker? It's like, well, you know what kind of cigars do we like to, to, to smoke while playing poker or, you know, what's, what's a cool set of cards to use when I'm playing poker or, you know, what's some strategies like, say I have this hand come up with some strategies I could use. It's more of a discussion around like what's happening, like with LEGO, you know, same thing. Like here's this cool lego set I found awesome. This is, and I'm like, yeah, that's freaking awesome, right? It's not a question, right? There's all these social components and discussions that don't fit at all. Like we literally have to disallow those on stack overflow because it's not about being social. It's about problems that you're facing in your work that you need concrete answers for, right? Like you have a real demonstrated problem that's sort of blocking you and something nobody's blocked by, you know, what should I do when I have a straight flush, right? Like it's not a blocking problem in the world. It's just an opportunity to hang out and discuss. So discourse was a way to address that and say, look, you know, uh discussion form software had was very, very bad. And when I came out of stack overflow in late 20 early, 20 early 2013, early, early 2012, um it was still very, very bad. I expected it improved in, in, in the four years since I last looked, but it had not improved at all. And I was like, well, that's kind of terrible because I love these communities of people talking about things that they love, you know, that, that they're just communities of interest, right? And there's no good software for them, like start ups would come to me and say, hey, Jeff, I wanna, you know, I have this start up, here's my idea. And uh the first thing I would say to them is like, well, first, why are you asking me? Like, I don't really know your, your field, right? Necessarily? Like, why aren't you asking like the community, like the people that are interested in this problem, the people that are using your product, why aren't you talking to them? And then they say, oh, great idea. Like, how do I do that? And then that's when I started playing sad trombone because I realized all the software involving talking to your users, customers, audience patrons, whatever it is, it was all really bad, you know, it was like stuff that I would be embarrassed to recommend to other people. And yet that's where I felt they could get the biggest and strongest, most effective input for what they should be doing with their product, right? It is from their users, from their community, right? That's what we did on ST overflow. So what we're talking about with fors the, what is it, the dark matter of the internet? Uh It's still, I don't know if it's still, but for the longest time it has some of the most passionate and fascinating discussions and what's the usual structure. There's usually what it's a, it's linear so it's sequential. So you're posting one after the other and there's page a nation. So it's every, there's a 10 posts and you go to the next page and that format still is used by, like, I'm uh we're doing a lot of research with Tesla vehicles and there's a Tesla Motors club for them, which is extreme. We really wanted to run that. Actually, they pinged us about it. I don't think we got it, but I really would like to got that one. But they've started before even 2012, I believe. I mean, they've been running for a long time. It's still an extremely rich source of information. So what, what's broken about that system and how are you trying to fix it? I think there's a lot of power in, in connecting people that love the same stuff around that specific topic. Meaning Facebook's idea of connection is just any human that's related to another human, right? Like, like through friendship or, you know, any other reason Facebook's idea of the world is sort of the, the status update, right? Like a friend of yours did something at a restaurant, right? Um, whereas discussion forums were traditionally around the interest graph, like I love electric cars specifically. I love Tesla, right? Like I love the way they approach the the problem I love the style of the founder. I just love the, the design ethic and there's a lot to like about Tesla. I know if you saw the Oatmeal, he did a whole love comic to Tesla and it was actually kind of cool because I learned some stuff he was talking about how great Tesla cars were specifically, like how they were built differently. And he went into a lot of great detail. That was really interesting. And to me that oatmeal post, if you read it is the genesis of pretty much all interest communities. I just really love this stuff. So for me, for example, there's Yo Yos, right? Like I'm into the Yo Yo communities and there's these interest communities are just really fascinating to me and I feel more connected to the Yo Yo communities than I do to, you know, friends that I don't see that often, right? Like to me, the powerful thing is the interest graph and Facebook kind of dabble in the interest graph. I mean, they have groups, you can sign up for groups and stuff, but it's really about the relationship graph. Like I I this is my coworker, this is my relative, this is my friend. Um but not so much about the interest. So I think that's the the linchpin of which forums and communities are built on that I personally love like III I, like I said, leadership is about passion, right? And being passionate about stuff is, is a really valid way to look at the world and I think it's a way um a lot of stuff in the world gets done. Like I once had someone describe me as he's like, Jeff, you're a guy who you just get super passionate about a few things at a time and you just go super deep in those things. And I was like, oh, that's kind of right. That's kind of what I do. I'll get into something and just be super into that for a couple of years or whatever and just learn all I can about it and go super deep in it. And uh that's how I enjoy experiencing the world, right? Like not being shallow on a bunch of things, but being really deep on a few things that I'm interested in. So forums kind of unlock that, right? And you know, you don't want a world where everything belongs to Facebook. At least I don't, I want a world where communities can kind of own themselves, set their own norms, set their own rules, um, control the experience because community is also about ownership, right? Like if, if you're meeting at the Barnes and Noble every Thursday and Barnes and Noble says, get out of here. You guys don't buy enough books. Well, you know, you're kind of hose, right? Barnes and Noble owns you, right? Like you can't, but if you have your own meeting space, you know, your own clubhouse, you can set your own rules, decide what you want to talk about there and just really generate a lot better information than you could like hanging out at Barnes and Noble every Thursday at 3 p.m. right? Uh So that's kind of the vision of discourse is a place where it's, it's fully open source. You can take this software, you can sell it anywhere and, you know, you and a group of people can go deep on whatever it is that you're into. And this works for start ups, right? Start ups are a group of people who go super deep on a specific problem, right? And they want to talk to the comedians like well install discourse, right? That's what we do at discourse. That's what I did is stack overflow. I spent a lot of time on meta stack overflow, which is our internal well public community feedback site and uh just experiencing what the users are experiencing, right? Because they're the ones doing all the work in the system. And they had a lot of interesting feedback and there's that 9010 rule of like 90% of the feedback you get is not really actionable for a variety of reasons. It might be bad feedback, it might be crazy feedback, it might be feedback, you just can't act on right now, but there's 10% of it that's like gold, it's like literally gold and diamonds where it's like feedback of really good improvements to your core product that are not super hard to get to and actually make a lot of sense. And my favorite is about 5% of those stuff I didn't even see coming. It's like, oh my God, I never even thought of that, but that's a brilliant idea, right? And I can point to so many features of stack overflow that we drive from meta stack overflow feedback and meta discourse. right? Same exact principle of discourse. You know, we're getting ideas from the community. I was like, oh my God, I never thought of that, but that's fantastic, right? Like I love that relationship with the community from bu having built these communities. What have you, what have you learned about? What's the process of getting a critical mass of members in a community? Is it luck, skill timing, persistence. What is uh is it the tools like discourse that empower that community? What, what's the key aspect of starting for one guy or gal and then building it to two and then 10 and 100 and 1000 and so on? I think we're starting with an end of one. I mean, I think it's persistence and and also you have to be interesting, like somebody I really admire once said something that I always liked about blogging. He's like here's how you blog, you have to have something interesting to say and have an interesting way of saying it, right? And then do that for like, 10 years. So that's the genesis is like, you have to have sort of something interesting to say. That's not exactly what else is saying and an interesting way of saying, which is another way of saying, kind of entertaining way of saying it. And then as far as growing it, it's like ritual, you know, like you have to, like, say, you're starting a blog, you have to say, look, I'm gonna blog every week, three times a week and you have to stick to that schedule, right? Because until you do that for like several years, you're never going to get anywhere. Like it just takes years to get to where you need to get to. And part of that is having the discipline to stick with the schedule and, and it helps again, if it's something you're passionate about this won't feel like work like I love this, I can talk about this all day, every day, right? Uh You just have to do it in a way that's interesting to other people. And then as you're growing the community, um that pattern of participation within the community of like generating these artifacts and inviting other people to help you, like, collaborate on these artifacts. Like even in the case of blogging, like I felt in the early days of my blog, which I started in 2004, which is really the genesis of stack overflow. If you look at all my blog, it leads up to stack overflow, which was I have all this energy in my blog. But I don't like 40,000 people were subscribing to me. And I was like, I want to do something. And then, then I met Joel and said, hey Joel, I want to do something, take this ball of energy for my blog and do something. And all the people read my blog saw that like, oh cool, you're involving us. You're saying, look, you're part of this community. Let's build this thing together. Like they pick the name like we voted on the name for stack overflow on my blog. Like we came up and naming is super hard for sly. The hardest problem in computer science is coming with a good name for stuff, right? Um But there you can go back to my, there's the poll where we voted and stack overflow became the name of the site. And all the early beta users of stack overflow were were audience of my blog plus Joel's blog, right? So we started from like if you look at the Genesis, OK? I was just a programmer who said, hey, I love programming, but I have no outlet to talk about it. So I'm just going to blog about it because I don't have enough people to work to talk to about it because at the time I worked a place where, you know, programming wasn't the core output of the company it was a pharmaceutical company and I just love this stuff, you know, to an absurd degree. So I was like, I'll just blog about it and then I'll find an audience and eventually found an audience. Eventually found Joel and eventually build stack overflow from that one core of, of activity, right? But it was that repetition of feeding back in feedback from my blog comments, feedback from Joel feedback from the the early stack overflow community. Um When people see that you're doing that, they will follow along with you, right? They say, oh cool, you're here in good faith, you're actually, you know, not listening to everything because that's impossible, that's impossible. But you're actually, you know, waiting our feedback in what you're doing because and why wouldn't I? Because who does all the work on stack overflow me, Joel? No, it's the other programmers that are doing all the work. So you gotta have some respect for that and then, you know, discipline around. Look, you know, we're trying to do a very specific thing here on stack overflow. We're not trying to solve all the world's problems. We're trying to solve this very specific Q and a problem in a very specific way, not because we're jerks about it, but because these strict set of rules help us get really good results, right? Um And programmers that's an easy sell for the most part because programmers are used to dealing with ridiculous systems of rules like constantly. That's basically their job. So they, they're very oh yeah, super strict system of rules that lets me get what I want. That's programming, right? That's what stack overflow is. So, so you're making it sound easy. But in 2004, let, let's go back there. In 2004, you started the blog Coding Whore. Was it called that at the beginning? At the very beginning? One of the smart things I did it, it's from a book by Steve mcconnell Code Complete, which is one of my favorite programming books. Still. Probably my number one programming book for anyone to read. Uh One of the smart things I did back then. I don't always do smart things when I start stuff I contacted Steve and said, hey, I really like this. Uh It was a sidebar illustration indicating danger in code, right? Coding horror was like watch out and I love that illustration because it spoke to me because I saw that illustration. Oh my God, that's me. Like I'm always my own worst enemy. Like that's the key insight in programming is every time you write something, think, how am I gonna screw myself because you will constantly, right? So that that icon was like, oh yeah, I need to constantly hold that mirror up and look and say, look, you're very fallible, you're gonna screw this up. Like how can you build this in such a way that you're not gonna screw it up later. Like how can you get that discipline around? Making sure at every step, I'm thinking through all the things that I could do wrong or that other people could do wrong because that is actually how you get to be a better programmer. A lot of times, right? So that sidebar illustration, I loved it so much. And I, I wrote Steve before I started my blog and say, hey, can I have permission to use this? Because I just really like this illustration. And Steve was kind enough to give me permission to do that and continues to give me permission. So you really, that's awesome. Uh But in 2004, he started his blog, you know, you look at uh Stephen King, his book on writing or Steven Pressfield War of Art book. I mean, it seems like writers suffer. I mean, it's a hard process of writing, right? It's like there's gonna be suffering. I mean, I won't kid you like, well, the work is suffering, right? Like doing the work, like even when you're every week, you're like, OK, that blog post wasn't very good or you know, people didn't like it or people said disparaging things about it, you have to like have the attitude like, you know, no matter what happens, I want to do this for me, right? It's not about you, it's about me. I mean, in the end, it is about everyone because this is how good work gets out into the world. But you have to be pretty strict about saying like, you know, I, I'm selfish in the sense that I have to do this for me. You know, you mentioned Stephen King, like his book on writing. But like one of the things I do, for example, when, when writing is like, I, I read it out loud. One of the best pieces of advice for writing anything is read it out loud like multiple times and make it sound like you're talking because that is the goal of good writing. It should sound like you said it with, with slightly better phrasing because you have more time to think about what you're saying. But like it should sound natural when you say it. And I think that's probably the single best writing advice I can give everyone just, just read it over and over out loud, make sure it sounds like something you would normally say it sounds good. And what's your process of writing? So there's usually a pretty good idea behind the blog post. So, ideas, right? So I think you gotta have the concept that there's so many interesting things in the world. Like, I mean, my God, the world is amazing, right? Like I i it it's, you can never write about everything that's going on because it, it's so incredible. But if you can't come up with like, let's say one interesting thing per day to talk about then you're not trying hard enough because the world is full of just super interesting stuff. And one great way to, to like mine stuff is go back to old books because they bring up old stuff that's still super relevant. And I, I did that a lot because I was like reading classic program books and a lot of the early blog books were like, oh, I was reading this program book and they brought this really cool concept and I want to talk about it some more and you get the, I mean, you're not claiming credit for that, but it gives you something interesting to talk about. That's kind of evergreen, right? Like you don't have to go, what should I talk about? So we just go dig up old classic programming books and find something that, oh, wow, that's interesting. Or how does that apply today or what about X and Y or compare these two concepts? So pull a couple of sentences in that book and then uh sort of play off of it, almost agree or disagree that so in 2007, uh you wrote that you were offered a significant amount of money to sell the blog. You chose not to, what were all the elements you were thinking about because I'd like to take you back. It seems like there's a lot of nonlinear decisions you made through life. Uh So what was that decision like? Right. So I one of the things I love is the uh choose your own adventure books, which I loved as a kid. And I feel like they're early programmer books because they're, they're all about if, then statements, right? If this, then this and they're also very, very unforgiving. Like there's all these sites that map the, the, the classic T venture books and how many outcomes are bad, there's a lot of bad outcomes. So part of the game is like, oh, I got a bad outcome, go back, one step, go back one further step. Like how did I get here? Right? Like it's a sequence of decisions. And this is true of life, right? Like every decision is, is a sequence, right? I individually, any individual decision is not necessarily right or wrong, but they, they lead you down a path, right? So I, I do think there's some truth to that. So this particular decision uh the blog had gotten fairly popular. There's a lot of RSS readers that I discovered and this guy contacted me out of the out of the blue from this like bug tracking company. He's like, oh, I really want to buy your blog for like, I, I think it was around, it was $100,000 might be like 80,000, but it was, it was a lot, right? Like, and that's uh you know, at the time, like I would have a year's worth of salary all at once. So I didn't really think about, like, well, you know, and I remember talking to people at the time. I was like, wow, that's a lot of money. But then, like, I really like my blog. Right? Like, do I want to sell my blog because it wouldn't really belong to me anymore at that point? And one of the guidelines that I like to, I don't like to give advice to people a lot. But one of the pieces of advice I do give because I do think it's really true and it's generally helpful is whenever you're looking at a set of decisions like, oh gosh, I do A B or C, you got to pick the thing that's a little scarier in that list because not, you know, not like jump off a cliff, scary, but the thing that makes you nervous because if you pick the safe choice, it's usually you're not really pushing, you're not pushing yourself, you're not choosing the thing that's gonna help you grow. So for me, the scarier choice was to say no, I was like, well, no, let's just see where this is going, right? Because then I own it. I mean, it belongs to me. It's my thing. Uh And I can just take it and, and to some other logical conclusion, right? Because imagine how different the world would have been that I said yes and sold the blog. It's like there probably wouldn't be stack overflow. Uh You know, a lot of other stuff would have changed. So for that particular decision, I think it was that same rule. Like what scares me a little bit more. Do the thing that scares you. So, speaking of which start ups, I think there's a specific and more general questions that a lot of people would be interested in. You've started stack overflow, you started discourse. So what's the, you know, it's 123 guys, whatever it is in the beginning. Uh What was that process like? Do you start talking about it? Do you start programming? Do you start? Like where is the birth and the catalyst that actually I can talk about in the context of both TEFL and discourse? So I think the key thing initially is there is a problem, something, there's some state of the world that's unsatisfactory to the point that like you're upset about it, right? Like in that case, it was experts exchange. I mean, Joel's original idea because approach Joel is like, look, Joel, I have all this energy behind my blog. I want to do something. I want to build something but I don't know what it is because I'm not, I'm honestly not a good idea person. I'm really not, I'm like the execution guy. I'm really good at execution, but I'm not good at like blue Skying ideas. It's not my forte, which is another reason why I like the community feedback because they blue sky all day long for you, right? So when I can go in and cherry pick a blue sky idea from community, even if I have to spend three hours reading to get one good idea. It's worth it, man. But anyway, so the idea from Joel was, hey, experts exchange, it's got great data, but the experience is hideous, right? It's trying to trick you. It feels like you use car salesman. It's just bad. So I was like, oh, that's awesome. It feeds in the community, it feeds into like, you know, we can make a creative comments. So I think the core is to have a really good idea that you feel very strongly about in the beginning that like there's a wrong in the world that we will, an injustice that we will write through the process of building this thing for discourse. It was like, look, there's no good software for communities to just hang out and like do stuff, right? Like whether it's problem solving, start up whatever forms are such a great building block of online community and they're hideous. They were so bad, right? It was embarrassing. Like I literally was embarrassed to be associated with this software, right? I was like, we have to have software. You'd be proud of it. Like this is competitive with Reddit, this is competitive with Twitter, this is competitive with Facebook, right? I would be proud to have the software on my site. Um So that was the genesis of discourse was feeling very strongly about um there needs to be a good solution for communities. So that's step one genesis when you feel super strongly about, right? And then people galvanize around the idea like Joel was already super excited about the idea. I was excited about the idea. So with the forum software, I was posting on Twitter, I had researched as part of my research, I start researching the problem, right? And I, I found a game called for Wars, which was a parody of form. It's still very, very funny of like form behavior circle. Like I would say 2003, it's age some, right? Like the behavior is a little different in there of Twitter. But it was awesome. It was very funny and it was like a game, it was like an RPG and it had a forum attached to it. So it was like a game about forums with a forum attached to. It was like, this is awesome, right? This is so cool. And the founder of that company or that project, it wasn't really a company contacted me. This guy Robin Ward from Toronto said, hey, you know, I saw you've been talking about forums and like, I really love that problem space. Like I'd still love to build really good for software because I don't think anything out there is any good. And I was like, awesome at that point. I was like, we're starting a company because like I couldn't have wished for a better person to walk through the door and say I'm excited about this too. Same thing with Joel, right? I mean, Joel is a legend in the industry, right? So when he walked through said, I'm excited about this problem. Like me too, man, we can do this, right? So that to me is the most important step like having an idea you're super excited about and another person a co-founder, right? Because again, you get that dual leadership, right? Of like, am I making a bad decision? Sometimes it's nice to have checks of like is this a good idea? I don't know. Right. So those are the crucial seeds but then starting to build stuff whether it's you programming. So there's tons of research, there's tons of research like what, what's out there that failed? Because a lot of people look at successes. Oh, look at how successful X is. Everybody looks at the successes. Those are boring. Show me the failures because that is what's interesting. That's where people were experimenting, that's where people were pushing but and they failed, but they probably failed for reasons that weren't directly about the quality of their idea, right? So look at all the failures, don't just look what everybody looks at, which is like, oh gosh, look at all these successful people, look at the failures, look at the things that didn't work, research the entire field. And so that's the research that I was doing that led me to Robin, right? Was that? And then when we, for example, we did uh uh uh stack overflow. We're like, OK, well, I really like elements of voting and digging reddit. I like the, the, the Wikipedia. Everything's up to date. Nothing is like an old tombstone that like has horrible out of date information. We know that works. Wikipedia is an amazing resource, blogging. The idea of ownership is so powerful, right? Like, oh I I Joe wrote this and look how good Joe's answer is, right? Like all these concepts were together researching all the things that are out there that were working and why they were working and trying to like them into that again, that Frankenstein's monster of what stack overflow is. And by the way, that wasn't a free decision because there's still a ton of tension in the stack overflow system. There's reasons people complain about stack overflow because it's so strict, right? Why is it so strict? Why are you guys always closing my questions? It's because there's so much tension that we built into the system around like trying to get good, good results out of the system and you know, I i it's not a free, that stuff doesn't come for free, right? It's not like we, we all have perfect answers and nobody will have to get their feelings hurt or nobody will have to get down voted like that. It doesn't work that way, right? Like, so this is an interesting point on a small tangent. Yeah, you write about anxiety. Uh So I, I've posted a lot of questions and written answers on stack overflow. And the question I usually go to something very specific to something I'm working on. This is something you talk about that really, the goal of stack overflow isn't about is to write a question. Not that's not about you. It's about the question that will help the community in the future. But that's a tough sell, right? Because people are like, well, you know, I don't really care about the community. What I care about is my problem, my problem and that's fair, right? It's sort of that again, that tension that balancing act of we want to help you, but we also want to help everybody that comes behind you, right? The long line of people are going to come and say, oh I kind of have that problem too, right? And if nobody ever gonna come up and say I have this problem too, then that question shouldn't exist on stack overflow because the question is too specific and that even that's tension, right? How do you judge that? How do you know that nobody's ever gonna have this particular question again? Um So there's a lot of tension in the system. Do you think that anxiety of asking the question, the anxiety of answering that tension is inherent to programmers is inherent to this kind of process or, or can it be improved? Can it be happy land where the that tension is not quite so harsh? Uh I, I don't think ST ec overflow can totally change the way it works. One thing they are working on finally is the ask page had not changed since 2011. I'm still kind of bitter about this because I feel like you have a Q and A system and what are the core pages in a Q A system? Well, first of all the question, all the answers and all the also the ask page, particularly when you're a new user or someone trying to ask a question, that's the point at which you need the most help and we just didn't adapt with the times. But the good news is they're working on this from what I understand and it's going to be a more wizard based format and you could envision a world where as part of this wizard based program when you're asking a question. So come up with a good title. What are good words to put in the title? One word that's not good to put in the title is problem. For example, I have a problem. Oh You have a problem. OK, a problem. That's great, right? Like you need specifics, right? Like so it's trying to help you make a good question title. For example, that step will be broken out. Um All that stuff but one of those steps in that wizard of asking could say, hey, I'm a little nervous, you know, I've never done this before. Can you put me in a queue for like special mentoring? Right? You could opt in to a special mentor. I think that would be fantastic. Like I don't have any objection to that at all in terms of being an opt in system because there are people that are like, you know, I just want to help them. I want to help a person no matter what I want to go above and beyond. I want to spend like hours with this person. Um, it depends what their goals are. Right. Who am I to judge? Right. So that's fine. It's not precluded from happening, but there's a certain big city ethos that we started with, like, look, we're New York City. You don't come to New York City and expect them to be. Oh, welcome to the city, Joe. How's it going? Come on in, let me show you around. That's not how New York City works. Right. I mean, and you know, again, New York City has a reputation for being rude, which I actually don't think it is having been there fairly recently. It's not real. People are just like going about their business. Right. Look, I have things to do. I'm busy, I'm a busy professional. As are you. And since you're a busy professional, certainly when you ask a question you're gonna ask the best possible question. Right. Because you're a busy professional and you would not accept anything less than a very well written question with a lot of detail about why you're doing it, what you're doing, what you researched, what you found. Right. Because you're a professional like me. Right? And this rubs people sometimes the wrong way. And I don't think it's wrong to say, look, I don't want that experience. I want just a more chill place for, for beginners. And I still think Stacks is not, was never designed for beginners, right? There's this misconception that you know, even Joel says, oh yeah, stack overflow for beginners. And I think if you're a prodigy, it can be, but that's not really representative, right? Like I think as a beginner, you want a totally different set of tools you want like live screen sharing, live chat, you want access to resources, you want a playground, like a playground, you can experiment in and like test and all the stuff that we just don't give people because that was never really the the audience that we were designing stack over for. That doesn't mean it's wrong. And I think it would be awesome if there was a site like that on the internet or if Stack overly said, hey, you know, we're gonna start doing this. That's fine too. You know, I'm not there. I'm not making those decisions. But I do think the pressure of the tension that you described is there for people to be. Look, I'm a little nervous because I know I gotta do my best work, right? The other one is something you talk about, which is also really interesting to me is duplicate questions or do it's a, it's a really difficult problem that you highlight super, super hard, like you could take one little topic and you could probably write 1020 30 ways of asking about that topic and there will be all different. I don't know if there should be one page that answers all of it. Is there a way that stack overflow can help disambiguate, like separate these duplicate questions or connect them together? Or is it a totally hopeless, difficult impossible task? I think it's a very, very hard computer science problem and partly because people are very good at using completely different words. It always amazed me on psych overflow, you'd have two questions that were functionally identical and one question had like zero words in common with the other question like, oh my God from a computer science perspective, how do you even begin to solve that? And it happens all the time. People are super good at this, right? Accidentally at asking the same thing in in like in 1020 different ways. And the other complexity is we want some of those duplicates to exist. Because if there's five versions with different words, have those five versions point to the one set, centralized answer, right? It's like, OK, this is duplicate. No, no worries. This, here's, here's the answer that you wanted over here on this, this, this, you know, the, the prime example that we want to have, um rather than having 10 copies of the question and the answer because if you have 10 copies of the question, the answer, this also devalues the reputation system which programmers hate. As I previously mentioned, you're getting a reputation for an answer that somebody else already gave. It's like, well, it's an answer but somebody else already gave that answer. So why are you getting reputation for the same answer as the other guy gave it four years ago? People get offended by that, right? So the reputation system itself adds tension to the system in that the people who have a lot of reputation become very incentivized to enforce the reputation system. Um And for the most part, this is good. I know it sounds weird, but for most part, it's like, look strict systems, I think to use tech overflow, you have to have the idea that, ok, strict systems ultimately work better. And I do think in programming, uh you're familiar with um, loose typing versus strict typing, right? The idea that you can declare a variable, not declare a variable, rather just start using a variable. And OK, I see it's implicitly an integer. Bam. Awesome duck equals five. Well, duck is now, uh inte five Right? And you're like, cool, awesome simpler, right? Why would I want to worry about typing and for a long time, like in the Ruby community, they're like, yeah, this is awesome. Like you just do a bunch of unit testing which is testing your programs validity after the fact to catch any bugs that, that, that strict typing of variables would have caught. And now you have this thing called typescript from Microsoft, from the guy who built C# Anders, who's one of the greatest minds in, in software development, right? Like in terms of language design and says, no, no, no, we want to bolt on a strict type systems, javascript because it makes things better. And now everybody's like, oh my God, we we deployed typescript and found 50 laden bugs that we didn't know about, right? Like this is super common. So I think there is a truth in programming that strictness, it's not the goal we're not saying be super strict because strictness is correct. No, it's no, no strictness produces better results. That's what I'm saying, right. So strict typing of variables, I would say you almost universally have consensus now is basically correct. Should be that way in every language, right? Duck equals five should generate an error because you know, you didn't declare, you didn't tell me that duck was an edger, right? That's a bug, right? Or maybe you miss type you type deck, right? Instead of duck, right? You never know this happens all the time, right? So with that in mind, I will say that the strictness of the system is correct. Now, that doesn't mean cruel. That doesn't mean mean that doesn't mean angry, it just means strict. OK? So I think where there's misunderstanding is and people get cranky, right? Like another question you ask is like, why are programmers kind of mean sometimes? Well, who do programmers work with all day long? So I have a theory that if you're in a job and you work with assholes all day long, what do you eventually become an asshole? And what is the computer except the world's biggest asshole? Because the computer has no time for your bullshit. The computer, the minute you make a mistake, everything is crashing down, right? One semicolon has crashed space missions, right? So that's normal. So you begin to internalize that you begin to think, oh, my coworker, the computer is super strict and kind of a jerk about everything. So that's kind of how I'm gonna be because I work with this computer and I have to accede to its terms on everything. So therefore you start to absorb that and you start to think, oh, well, being really strict arbitrarily is really good. An error of error code 56249 is a completely good error message because that's what the computer gave me, right? So you kind of forget to be a person at some level and you know how they say great detect internalize criminals and kind of are criminals themselves like this trope of the master detective is good because you can think like the criminal. Well, I do think that's true of programmers, really good programmers think like the computer because that's their job. But if you internalize it too much, you become the computer and you kind of become a jerk to everybody because that's what you've internalized. You're almost not a jerk, but you have no patience for lack of strictness. As you said, it's not out of a sense of meanness. It's accidental, but I do believe it's an occupational hazard of being a programmer is you start to behave like the computer. You're very unforgiving. You're very terse, you're very, oh, wrong, incorrect move on. It's like, well, can you help me? Like, what could I do to fix? No wrong next question, right? Like that's normal for the computer, right? Just fail next, right? Like, I don't know if you remember in Saturday Night Live, like in the nineties they had this character who was an it guy. The move. Move. Move was that Jimmy Fallon? No, no. Who played him? Um OK. Yeah, I remember move. He had no patience for it. TV, actually might have been, might have been. But anyway, that was the, that's always been the perception, right? You start to behave like the computer. It's like, oh, you're wrong out of the way you know, you've written so many blog posts about programming, about programs, programming, uh programmers. What do you think makes a good, let's start with what makes a good solo programmer? Well, I don't think you should be a solo program, I think to be a good solo programmer, it's kind of like what I talked about. Uh, well, not on mic, but one of the things that John Carmack, one of the best points he makes in the book Masters of Doom, which is a fantastic book. And anybody listening to this who hasn't read it, please read it. It's such a great book is that at the time they were working on stuff like Wolfenstein and Doom. Like they didn't have the resources that we have today. They didn't have stack overflow, they didn't have Wikipedia, they didn't have like discourse forums, they didn't have places to go to get people to help them, right? They had to work on their own. And that's why it took a genius like Carmack to do this stuff because you had to be a genius to invent from first principles. A lot of the stuff he was, he was like the hacks he was coming up with were genius, right? Genius level stuff. But you don't need to be a genius anymore. And that means not working by yourself. You have to be good at researching stuff online. You have to be good at asking questions really good questions that are really well researched, which implies, oh, I went out and researched for three hours before I wrote this question. Like, that's what you should be doing because that's what's gonna make you good. Right. To me, this is the big difference between programming in like the eighties versus programming today is like, you, you kind of had to be by yourself back then. Like, where would you go for answers? I remember in the early days when I was a learning visual basic for Windows. Like I would call the Microsoft helpline on the phone when I had like a program because I was like, I don't know what to do. So I would like go and call and they have these huge phone banks and like, can you imagine how alien that is now? Like who would do that? Right? Like that's crazy. So there was just nowhere else to go when you got stuck, right? Like I, I had the books that came with it. I read those, studied those religiously. I, I just saw a post from Steve Sinofsky that said this C++ version seven came with like 10,000 pages of written material. Because where else were you gonna figure that stuff out? Go to the library when you didn't have Wikipedia, you didn't have, you know, reddit, you know where to go to answer these questions. So you, you, you've talked about through the years uh basically not having an ego and not thinking that you're uh the best programmer in the world. It's always kind of just looking to improve, to become a better programmer than you were yesterday. So how have you changed as a programmer? And as a, as a thinker designer around programming over the past, what is it 15 years really? Of being a public figure? I, I would say the big insight that I had is eventually as a programmer, you have to kind of stop writing code to be effective, which is kind of disturbing. Um because you really love it and but you realize like being effective at programming at programming in the in the general sense, uh doesn't mean writing code. And a lot of times you can be much more successful by not writing code and writing code in terms of just solving the problems, you have essentially hiring people that are really good and like setting them free and like giving them basic direction, right? Like on strategy and stuff because a lot of the problems you encounter aren't necessarily solved to like really gnarly code, they're solved by conceptual solutions which can then be turned into code. But are you even solving the right problem? I mean, so I I would say for me, the main insight I have is is is to succeed as a programmer, you eventually kind of stop writing code that's gonna sound discouraging probably to people hearing. But I don't mean it that way. What I mean is that you're coding at a higher level language eventually like OK, so we're coding an assembly language, right? That's the beginning, right? You're hard coded to the, the architecture, then you have stuff like c where it's like, wow, we can abstract across the architecture, you can write code, I can then compile that code for arm or you know, you know, whatever you know X A six or whatever else is out there and then even a higher level than that, right? Like you're looking at like Python Ruby interpreted languages. And then to me as a programmer, like, OK, I want to go even higher. I wanna go higher than that. How do I abstract higher than language? It's like, well, you abstract in spoken language and written language, right? Like you're sort of inspiring people to get things done, giving them guidance. Like what if we did this? What if we did this um you're writing in the highest level language that there is, which is for me English, right? Whatever your spoken language is. So it's all about being effective, right? And I think uh uh uh Patrick mckenzie Patio 11 on, on hacker news and works at Stripe has a great post about this, of how calling yourself a programmer is a career limiting move at some level once you get far enough from your care. And I really believe that and I, and again, I apologize, this is sound discouraging. I don't mean it to be. But he's so right because all the stuff that goes on around the code, like the people. Like, that's another thing if you look at my early is about, wow, programming is about people more than it's about code, which doesn't really make sense, right? But it's about, can these people even get along together? Can they understand each other? Can you even explain to me what it is you're working on? Are you solving the right problem? People were right? Another classic program book which again up there with code complete, please read people where it's that software is people, right? People are the software first and foremost. So a lot of the skills that I was working on early in the blog were about figuring out the people parts of programming, which was the harder parts, the hard part of programming, once you get a certain skill level programming, you can pretty much solve any reasonable problem that's put in front of you. You're not writing algorithms from scratch, right? That just doesn't happen. So any sort of reasonable problem print, print in front of you're gonna be able to solve. But what you can't solve is our manager is a total jerk. You cannot solve that with code that is not a code solvable problem. And yet that will cripple you way more than oh, we had to use this stupid framework I don't like or, or, or you know, Sam keeps writing bad code that I hate or, you know, you know, Dave is off there in the wilderness writing God knows what, right. These are not your problems as your manager or a coworker is so toxic to everybody else in your team that like, nobody can get anything done because everybody's so stressed out and freaked out. Right. These are the problems that you have to attack. Absolutely. And so as you go to these higher level abstractions, as you developed as a programmer to hire higher level abstractions and go into natural language, you're also the guy who kind of preached, you know, building it, you know, diving in and doing it and, and, and, and like learn by doing. Uh do you, do you worry that as you get to higher and higher level abstractions, you lose track of the lower level of just building uh is like, do you worry about that? You know, even not maybe now, but 10 years from now, 20 years from now. Well, no, I mean, there is always that paranoia and oh gosh, I don't feel as valuable since I'm not writing code. But for me, like when we started the discourse project, it was Ruby, which I didn't really know Ruby. I mean, as you pointed out and this is another valuable arbitration stack overflow, you can be super proficient for example, C# which I was working and that's where we built stack overflow and still is written in and then switch to Ruby and you're a newbie again, right? Like I'm, but, but you have the framework. I know what a for loop is. I know what recursion is. I know, you know what a, what a stack trace is, right? Like I have all the fundamental concepts to be a programmer. I just don't know Ruby. So I'm still on a higher level. I'm not like a beginner, beginner, like you're saying, I'm just like I need to apply my programming concepts. I already know to Ruby. Well, there's a question that's really interesting. So looking at Ruby, how do you go about learning enough that your intuition can be applied that carried over? That's what I was trying to get to is like what I realized when I started with just me and Robin, I realized if I bother Robin, I am now costing us productivity, right? Every time I go to Robin rather than building the, the uh uh our, our first alpha version of discourse, he's now answering my stupid questions about Ruby. Is that a good use of his time? Is that a good use of my time? The answer to both of those was resoundingly no, right? Like we were getting to an alpha and it was pretty much just like, OK, we'll hire more programmers, right? Like we, we eventually hired Neil and then eventually Sam who came in as a co-founder. Um Actually, it was Sam first, then Neil later. But the answer to the problem is just hire other come programmers, not like teach. Now, I shall pull myself up by my bootstraps and, and, and Ruby, but at some point writing code becomes a liability to you in terms of getting things done. There's so many other things that go on in the project, like building the prototype, like you mentioned, like, well, how do you, if you're not writing code, how does everybody keep focus on? Like what, what, what are we building? Well, first basic mock ups and research, right? Look like what, what do we even want to build? There's a little bit of that that goes on. But then very quickly you get to the prototype stage, like build a prototype. Let's iterate on the prototype really, really rapidly. And that's what we do with discourse and that's what we, we demoed to get our, our seed funding for discourse was the, the alpha version of discourse um that we had running and ready to go and it was very, it was bad. I mean, it was, I'll just tell you it was bad. Um I have, we have screenshots of it and I'm just like embarrassed to look at it now. Um But it was the prototype, we were figuring out like what, what's working, what's not working because there's such a broad gap between, between um the way you think things will work in your mind or even on paper and the way they work once you sit and live in the software, like actually spend time living and breathing on software so different. So my philosophy is get to uh a prototype and then what you're really optimizing for speed of iteration, like how you can turn the crank, how quickly can we iterate? That's the absolutely critical metric of any software project. And I had a tweet recently that people liked and I totally, this is so fundamental to what I do is like, if you want to measure the core competency of any software tech company, it's the speed at which somebody can say, hey, we really need this word and the product change this word, right? Because it will be more clear to the users. Like what like instead of respond, it's reply or something. But there's some from the conception of that idea to how quickly that single word can be changed in your software and rolled out to users. That is your life cycle. That's your health, your heartbeat. If your heartbeat is like super slow, you're basically dead. No, seriously. Like if it takes two weeks or even a month to get that single word change, that was like, oh my God, this is a great idea that word is so much clearer. I'm talking about like a super like everybody's on board for this change. It's not like let's just change a word because we're bored. It's like this is an awesome change. Um And then it takes, you know, months to roll out. It's like, well, you're dead, like you can't iterate, you can't, how you can do anything. Right. Like, so anyway, about the heartbeat, it's like get the, the, the prototype and then iterate on it. That's, that's what I view as like the central tenet of modern software development. That's fascinating. You put it that way. It's actually, so I work in, I build autonomous vehicles and, and when you look at what uh maybe compare Tesla to most other automakers, uh the psych, the whatever the heartbeat for Tesla is literally days. Now, in terms of they can um over the air deploy software updates to all their vehicles, which is markedly different than every other automaker, which takes years to update a piece of software. And so, uh and that's reflected in everything that's um the, the final product that's reflected in really how slowly they adapt to the times and to be clear, I'm not saying being a hummingbird is the goal either. It's like you don't want a heartbeat, that's like so fast. It's like you're, you're, you know, you're just freaking out. But like it is a measure of health, you should have a healthy heartbeat. It's up to, for people listening to decide what that means, but it has to be healthy, it has to be reasonable because otherwise you're just gonna be frustrated because like, that's how you build software, you make mistakes, you roll it out, you live with it, you see what it feels like and say, oh God, that was a terrible idea. Oh my gosh, this could be even better if we did. Why? Right? You turn the crank and then the more you do that, the faster you get ahead of your competitors, ultimately because you're, its rate of change, right? Delta V, right. How fast are you moving? Well, within a year you're gonna be miles away by the time they catch up with you. Right? Like, that's the way it works. And plus users, like I as a software developer and user, I love software that's constantly changing because I don't understand. People get super pissed off when like, oh, they change the software. I mean, how dare they, I'm like, yes, change the software, change it all the time, man. That's, that's what makes this stuff great is that it can be changed so rapidly and become something that, that is greater than it is now. Now, granted there's some changes that suck. I admit I've seen it many times, but in general it's like, that's what makes software cool. Right? Is that it is so malleable. Like fighting that is like, weird to me because it's like, well, you're fighting the essence of the thing that you're building. Like that doesn't make sense. You want to really embrace that, not, not to be a hummingbird but like embrace it to a healthy cycle of your heartbeat. Right. So you talk about that people really don't change. It's true. The, that's why probably a lot of the stuff you write about in your blog probably will remain true. There's a flip side of the coin people don't change. So investing in understanding people is, is like learning UNIX in 1970 because nothing has changed, right? Like all those things you've learned about people will still be valid 34 years from now. Whereas if you learn the latest javascript framework that's going to be good for like two years. Right. Exactly. So, but if you look at the future of programming, so there's a people component, but there's also the technology itself. Do you, what do you see as the future of programming? Will it change significantly? Or as far as you can tell, uh people are ultimately programming and so they will not, it's not something that you foresee changing any fundamental way. Well, you gotta go look back on sort of the basics of programming. And one thing that always shocked me is like source control, like I didn't learn anything about source control and I graduated from college in 1992. But I remember hearing from people like in, as late as like 1998 1999 like even maybe today, they're not learning source control. And to me it's like, well, how can you not learn source control? That is so fundamental to working with other programmers working in a way that you don't lose your work. Like just, just basic soft. The bed literal bedrock of software development is source control. Now you compare today like github, right? Like Microsoft bought github, which I think was incredibly smart acquisition, move on their part. Now they have anybody who wants like reasonable source controls to go send them on github. It's all set up for you, right? There's tons of walkthroughs, tons of tutorials. So from the concept of like has programming advanced from say 1999 it's like, well, hell we have github, I mean, my God, yes. Right. Like it's, it's massively advanced over over what it was now as to whether programming is significantly different. Um I'm going to say no, but I think the baseline of like what we view as like fundamentals will continue to go up and actually get better like source control. For example, that's one of the fundamentals that has gotten, I mean, hundreds of orders of magnitude better than it was 1020 years ago. So those are the fundamentals. Let me introduce two things that maybe you can comment on. So one is mobile phones so that could fundamentally transform what um what programming is or maybe not, maybe you can comment on that. And the other one is artificial intelligence which promises to in some ways to do some of the programming for you is one way to think about it. So it's really what a programmer is is a using the intelligence that's inside your skull to, to do something useful. Uh The hope with artificial intelligence is that it does some of the useful parts for you where you don't have to think about it. So, do you, do you see smartphones, the fact that everybody has one and they're getting more and more powerful as potentially changing programming? And do you see A I as potentially changing program? Ok. So that's good. So smartphones have definitely changed. I mean, since, you know, I guess 2010, that's when they really started getting super popular. I mean, in the last eight years, the world has literally changed, right? Like everybody carries a computer around and that's normal. I mean, that is such a huge change in society. I think we're still dealing with a lot of the positive, negative ramifications of that, right? Like everybody's connected all the time. Everybody's on the computer all the time. That was my dream world as a geek, right? But it's like be careful what you ask for, right? Like, wow, now everybody has a computer. It's not quite the utopia that we thought it would be, right? Computers can be used for a lot of stuff that's not necessarily great. Um So to me that's the central focus of the smartphone is just that it puts a computer in front of everyone, granted a small touchscreen, smallish touchscreen computer. But as for programming, like, I don't know, I don't think that I've kind of over time come to subscribe to the UNIX view of the world when it comes to programming, it's like you want to teach these basic command line things and that is just what programming is going to be for. I think a long, long time. I don't think there's any magical, like, visual programming that's going to happen. Um, I, I just, I don't know, I've, I've, over time, I've become a believer in that UNIX philosophy of just, you know, they, they kind of had to write with UNIX that's going to be the way it is for a long, long time. And we, we'll continue to, like I said, raise the baseline, the tools will get better, it'll get simpler, but it's still fundamentally going to be command line tools, you know, fancy Ds, that's kind of it for the foreseeable future. I'm not seeing any visual programming stuff on the horizon because you kind of think like, what do you do on a smartphone that will be directly analogous to programming? Like I'm trying to think, right? Like, and there's really not much so uh not necessarily analogous to programming, but the kind of things that the kind of programs you need to write might need to be very different and the kind of languages, I mean, but I probably also subscribe to the same just because everything in this world might be written in javascript. Uh Oh yeah, that's, that's already happening. I mean, discourse is a bet on discourse is itself javascript is another bet on that side of the table. And I still try to believe in that. So I would say smartphones have mostly a cultural shift more than a programming shift. Now, your other question was about artificial intelligence and like so vice is predicting what you're gonna do. And I do think there's some strength to that. I think artificial intelligence kind of over selling it in terms of what it's doing. It's more like people are predictable, right? People do the same things. Like, let me give you an example. 11 check, we put in a discourse that's in a lot of big uh uh commercial websites is say you log in from New York City now and then an hour later you log in from San Francisco. It's like, well, hm, that's interesting. How did you get from New York to San Francisco in one hour? So at that point, you're like, ok, this is a suspicious login at that point. So we would alert you. It was like, ok, but that's not a I, right. That's just a heuristic of like, how did you in one hour get 2000 miles, right? That doesn't, I mean, you grab, maybe you're on a VPN, there's other ways to happen, but that's just a basic prediction based on the idea that people pretty much don't move around that much. Like they may travel occasionally but like nobody, I mean, unless you're a traveling salesman, that's literally, we're traveling the world every day. Like there, there's so much repetition and, and predictability in terms of things you're going to do. And I think good software anticipates your needs. Like, for example, Google, I think it's called Google now or whatever. That Google thing is that predicts your commute and predicts based on your phone location. Like, where are you every day? Well, that's probably where you work, that kind of stuff. I do think computers can get a lot better at that, but I, I hesitate to call it like full blown A I it's just computers getting better at like, first of all, they have a ton of it because everybody has a smartphone. Now, all of a sudden we have all this data that we didn't have before about location about like, you know, communication and feeding that into some, some basic heuristics and maybe some fancy algorithms that turn it into predictions of anticipating your needs. Like, like a friend would, right? Like, oh, hey, I, I see your home. Would you like some dinner? Right. Like, let's go get some food because that's usually what we do at this time of day. Right. In the context of actually the active programming. Do you see ID ES improving and making the life of programming is better? I do think that is possible because there's a lot of repetition in programming. Right. Oh, you know, clip would be the bad example of, oh, I see it, it looks like you're writing a for loop. Um, but there are patterns in code, right? Like, and, and actually libraries are kind of like that, right? Like, rather than go, you know, code up your own http request library. It's like, well, you'd use one of the existing ones that we have. It's already a trouble shot. Right. It's not A I per se, it's just, you know, building better Lego bricks, bigger Lego bricks that have more functionality in them. So people don't have to worry about the low level stuff as much anymore. Like wordpress, for example, to me is like a tool for somebody who isn't a programmer to do something. I mean, you can turn wordpress into anything. It's kind of crazy actually through plugins, right? And that's not programming per se. It's just Lego bricks, stacking wordpress elements, right? And a little bit of configuration glue. So I would say maybe in a broader sense what I'm seeing, like there'll be more gluing and less like actual programming and that's a good thing, right? Because most of the stuff you need is kind of out there already. You said 19 seventies, UNIX, do you CPHB and these kind of old remnants of, of the early birth of programming remaining with us for a long time, like you said UNIX in itself, you see, ultimately, you know, this stuff just being there out of momentum. I kind of do. I mean, I, I was a big believer in Windows early on and I was a big, you know, I was like UNIX, what a waste of time. But over time I've completely flipped on that where I was like, OK, the UNIX guys were, right? And pretty much Microsoft and Windows were kind of wrong, at least on the server side on the desktop, right? You need a gooey, you know, all that stuff. And yeah, the two philosophies like Apple built on UNIX effectively Darwin. Um And on the desktop, it's a slightly different story, but on the server side where you're gonna be programming now, it's a question of where the programming is gonna be. There's gonna be a lot more like client side programming because technically discourse is client side programming. The way you get discourse, we deliver a big ball of javascript, which is the next Q locally. Um So we're really using a lot more local computing power, we'll still retrieve the data. Obviously, we have to display the posts on the screen and so forth. But in terms of like sorting and a lot of the basic stuff we're using the host processor. Um But to the extent that a lot of programming is still going to be server side, I would say, yeah, the UNIX philosophy definitely won and there'll be different veneers over UNIX. But it's still if you, if you peel away one or two layers. It's going to be UNIX for a long, I think UNIX one. I mean, so definitively, it's interesting to hear you say that because you've done so much excellent work on the Microsoft and uh side in terms of back end development. Cool. So what's the future hold for Jeff Atwood? I mean, the discourse continuing the discourse in trying to improve conversation on the web. Well, this course is what is uh and originally I called it a five year project. Then really quickly revise that to a 10 year project. So we're, we started in early to the 2013 that we launched the first version. So we're still, you know, five years in this is the part where it starts getting good. Like we have a good product now, discourse, there's any, any project you build in software, it takes three years to build what you wanted to build anyway, like V one is gonna be terrible which it was but you ship it anyway cause that's how you get better at stuff. It's about turning the crank. It's not about V one being perfect because that's ridiculous. It's about V one. Then let's get really good at V 1.11 0.21 0.3. Like how fast can we iterate? And I think we're iterating like crazy on discourse to the point that like it's a really good product. Now we have serious momentum. Um And my original vision was I want to be the wordpress of discussion, meaning someone came to you and said, I want to start a blog. Although the very question is kind of archaic now, it's like who actually blogs anymore. But uh I wanted the answer to that to be, it would be uh wordpress normally because it's the obvious choice for blogging most of the time. Uh But if someone said, hey, I wanna, I need a group of people to get together and do something. The answer should be discourse, right? That should be the default answer for people because it's open source, it's free. It doesn't cost you anything, you control it, you can run it. Um Your minimum server cost for discourse is five bucks a month at this point. Um They actually got the VPs prices down. It used to be $10 a month for one gigabyte of RA M which we, we're our, our dependent. We, we have a kind of heavy stack like there's a lot of stuff in discourse. You need post graphs, you need redis, you need Ruby on rails. Um You need a sidekick for scheduling. It's not a trivial amount of stuff because we were architected for like, look, we're building for the next 10 years. I don't care about shared PHP hosting. That's, that's not my model. My idea is like, hey, you know, eventually this is going to be very cheap for everybody and I want to build it right. Using again, you know, higher bigger building block levels, right? That have more requires. And there's a wordpress model of wordpress dot org, wordpress dot com. Is there a central hosting for discourse or no? There is we're not strictly segmenting into the open source versus the commercial side. We have a hosting business. That's how discourse makes money is. We, we host discourse instances and we have a really close relationship with our customers of the uh symbiosis of them giving us feedback on the product. We definitely wait feedback from customers a lot heavier than feedback from somebody who just wanders by and gives feedback. Uh But that's where we make all our money, but we don't have a strict division. Um We encourage people to use discourse like the whole point is that it's free, right? Anybody can set it up. I don't want to be the only person that hosts discourse. That's absolutely not the goal, but it is a primary way for us to build a business and it's actually kind of a great business. I mean, the business is going really, really well uh in terms of hosting. So I uh I used to work at Google Research as a company that's basically funded an advertisement. So as Facebook, let me, let me ask if you can comment on it. I think advertisement is best. So you'd be extremely critical on what ads are, but at its best, it's actually serving you in a sense, it's giving you, it's connecting you to what you would want to explore. So it's like related posts or related content is the same. That's the best of advertisement. So this course is uh connecting people based on their interests. It seems like a place where advertisement at its best could actually serve the users. Is that something that you're considering thinking about as a way to bring uh to financially support the platform? That's interesting because I actually have a contrarian view of advertising, which I kind of agree with you. I recently installed ad blocker, like reluctantly because I, I don't like to do that. But like the performance of the ads man, like they're so heavy now and like, it's just crazy. So like it's almost like a performance argument more than like, I actually am pro ads. And I contrary, I have a contrarian viewpoint, I agree with you if you do ads, right? It's showing you stuff you would be interested in anyway. Like I don't mind that that actually is kind of a good thing. So plus I think it's it's rational to want to support the people that are doing this work through seeing their ads. And, but that said I run adblock now, which I, I didn't want to do, but I was convinced by all these articles like 3040 megabytes of stuff just to serve you ads. Um Yeah, it feels like ads now are like the experts exchange of, uh, whenever you start a stack overflow is a little bit, it's all, there's so many companies in ad tech though. It's embarrassing. Like you can do that if you see those logo charts of like just the whole page, it's like you can't even see them. They're so small. There's so many companies in the space. But since you brought it up, I do want to point out that very, very few discourse sites actually run using an ad supported model. It's not effective. Like it's too diluted. It's too weird. It doesn't pay well and like users hate it. So it's a combination of like users hate it. It doesn't actually work that well in practice, like in theory, yes, I agree with you. You clean fast ads that were exactly the stuff you would be interested in. Awesome. We're so far from that though, right? Like Google does an OK job. They retargeting and stuff like that. But in the, in, in the real world discourse sites rarely can make ads work. It just doesn't work for so many reasons. But you know, it does work is subscriptions Patreon uh uh uh affiliate codes for like Amazon of like just oh, here, here's a cool yo yo click and then you click and go to Amazon. They get a small percentage of that, which is fair, I think because you saw the yo yo on that site and you click through and you bought it, right? That's fair for them to get 5% of that or 2% of that, whatever it is, those things definitely work. In fact, a site that I used to participate on a lot. I help the owner and one of things III I got them switched to discourse. I basically paid them to switch to discourse because I was like, look, you guys gonna switch, I can't come here anymore on this terrible software. Um But I was like, look and on top of that, like you're serving people ads that they hate. Like you should just go full on Patreon because he had a little bit of Patreon, go full on Patreon do the Amazon um um affiliates thing for any Amazon links to get posted and just do that and just triple down on that stuff and that's worked really well for them and this creator in particular. So that stuff works. But traditional ads, I mean, definitely not working at least on discourse. So last question, you've created the code keyboard. I've programmed most of my adult life on a Kinesis keyboard. I have one upstairs. Now, can you describe what a mechanical keyboard is and why is it something that makes you happy? Well, you know, this is another fetish item really, like it's not required, you can do programming on any kind of keyboard, right? Even like an onscreen keyboard. Oh God, that's terrifying, right? Like, but you could, I mean, if you look back to the early days. Chicklet keyboards, which are, I mean, those are awful. Right? But what's a chicklet key? Oh God. Ok. Well, it's just like thin rubber membranes, the rubber ones. Oh, no, super bad. Right. So it's a fetish item. All that really says is, look, I care really about keyboards because the keyboard is the primary method of communication with the computer. Right? So it's just like having a nice mic for this this podcast. You want a nice keyboard, right? Because it has very tactile feel, I can tell exactly when I press the key, I get that little click. So, oh, and it feels good. And it's also kind of a fetish item. It's like, wow, I care enough about programming that I care about the tool, the primary tool that I use to communicate with the computer, make sure it's as good as it feels good to use for me. And like I can be very pretty with it. So to be honest, it's a little bit of a fetish item, but a good one, it indicates that you're serious in, in case you're interested, it indicates that you care about the fundamentals because you know what makes you a good programmer, being able to type really fast, right? Like this is true, right? So a core skill is just being able to type fast enough to get your ideas out of your head into the code base. So just practicing your typing can make you a better programmer. It is also something that makes you well, makes you enjoy typing. Right? The actual act. Uh something about the process, like I play piano, there's a tactile feel that ultimately uh feeds the passion makes you happy. Right. No, totally. That's it. I mean, and, and it's funny because artisanal keyboards have exploded. Like MASR has gone ballistic with this stuff. There's probably like 500 keyboard projects on MASR alone. And there's some other guy I follow on Twitter. I used to write for this site, the tech report way back in the day and he's like every week he's just posting like what I call keyboard porn of like just cool keyboard like, oh my God, this look really cool. Right? Like that's like how many keyboards this guy have? It's kind like me with yo yos. How many yo do you have? How many do you need? Well, technically one, but I like a lot. I don't know why. So, same thing with keyboard. So, yeah, they're awesome. Like I highly recommend anybody that doesn't have a mechanical to research it, look into it and see what you like. And you know, it's ultimately a fetish item. But I think these sort of items, these religious artifacts that we have are part of what makes us human like that. That part is important, right? It kind of makes life worth living. It's not necessary in the strictest sense, but ain't nothing necessary if you think about it, right? Like so, yeah, why not? So sure, Jeff? Thank you so much for talking today. Yeah, you're welcome. Thanks for having me."
